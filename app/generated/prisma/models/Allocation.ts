
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Allocation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Allocation
 * 
 */
export type AllocationModel = runtime.Types.Result.DefaultSelection<Prisma.$AllocationPayload>

export type AggregateAllocation = {
  _count: AllocationCountAggregateOutputType | null
  _avg: AllocationAvgAggregateOutputType | null
  _sum: AllocationSumAggregateOutputType | null
  _min: AllocationMinAggregateOutputType | null
  _max: AllocationMaxAggregateOutputType | null
}

export type AllocationAvgAggregateOutputType = {
  id: number | null
  amount: number | null
  budgetId: number | null
  userId: number | null
}

export type AllocationSumAggregateOutputType = {
  id: number | null
  amount: number | null
  budgetId: number | null
  userId: number | null
}

export type AllocationMinAggregateOutputType = {
  id: number | null
  name: string | null
  amount: number | null
  budgetId: number | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AllocationMaxAggregateOutputType = {
  id: number | null
  name: string | null
  amount: number | null
  budgetId: number | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AllocationCountAggregateOutputType = {
  id: number
  name: number
  amount: number
  budgetId: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AllocationAvgAggregateInputType = {
  id?: true
  amount?: true
  budgetId?: true
  userId?: true
}

export type AllocationSumAggregateInputType = {
  id?: true
  amount?: true
  budgetId?: true
  userId?: true
}

export type AllocationMinAggregateInputType = {
  id?: true
  name?: true
  amount?: true
  budgetId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type AllocationMaxAggregateInputType = {
  id?: true
  name?: true
  amount?: true
  budgetId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type AllocationCountAggregateInputType = {
  id?: true
  name?: true
  amount?: true
  budgetId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AllocationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Allocation to aggregate.
   */
  where?: Prisma.AllocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Allocations to fetch.
   */
  orderBy?: Prisma.AllocationOrderByWithRelationInput | Prisma.AllocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AllocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Allocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Allocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Allocations
  **/
  _count?: true | AllocationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AllocationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AllocationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AllocationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AllocationMaxAggregateInputType
}

export type GetAllocationAggregateType<T extends AllocationAggregateArgs> = {
      [P in keyof T & keyof AggregateAllocation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAllocation[P]>
    : Prisma.GetScalarType<T[P], AggregateAllocation[P]>
}




export type AllocationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AllocationWhereInput
  orderBy?: Prisma.AllocationOrderByWithAggregationInput | Prisma.AllocationOrderByWithAggregationInput[]
  by: Prisma.AllocationScalarFieldEnum[] | Prisma.AllocationScalarFieldEnum
  having?: Prisma.AllocationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AllocationCountAggregateInputType | true
  _avg?: AllocationAvgAggregateInputType
  _sum?: AllocationSumAggregateInputType
  _min?: AllocationMinAggregateInputType
  _max?: AllocationMaxAggregateInputType
}

export type AllocationGroupByOutputType = {
  id: number
  name: string
  amount: number
  budgetId: number
  userId: number
  createdAt: Date
  updatedAt: Date
  _count: AllocationCountAggregateOutputType | null
  _avg: AllocationAvgAggregateOutputType | null
  _sum: AllocationSumAggregateOutputType | null
  _min: AllocationMinAggregateOutputType | null
  _max: AllocationMaxAggregateOutputType | null
}

type GetAllocationGroupByPayload<T extends AllocationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AllocationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AllocationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AllocationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AllocationGroupByOutputType[P]>
      }
    >
  > 



export type AllocationWhereInput = {
  AND?: Prisma.AllocationWhereInput | Prisma.AllocationWhereInput[]
  OR?: Prisma.AllocationWhereInput[]
  NOT?: Prisma.AllocationWhereInput | Prisma.AllocationWhereInput[]
  id?: Prisma.IntFilter<"Allocation"> | number
  name?: Prisma.StringFilter<"Allocation"> | string
  amount?: Prisma.FloatFilter<"Allocation"> | number
  budgetId?: Prisma.IntFilter<"Allocation"> | number
  userId?: Prisma.IntFilter<"Allocation"> | number
  createdAt?: Prisma.DateTimeFilter<"Allocation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Allocation"> | Date | string
  budget?: Prisma.XOR<Prisma.BudgetScalarRelationFilter, Prisma.BudgetWhereInput>
  transactions?: Prisma.TransactionListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AllocationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  budget?: Prisma.BudgetOrderByWithRelationInput
  transactions?: Prisma.TransactionOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type AllocationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AllocationWhereInput | Prisma.AllocationWhereInput[]
  OR?: Prisma.AllocationWhereInput[]
  NOT?: Prisma.AllocationWhereInput | Prisma.AllocationWhereInput[]
  name?: Prisma.StringFilter<"Allocation"> | string
  amount?: Prisma.FloatFilter<"Allocation"> | number
  budgetId?: Prisma.IntFilter<"Allocation"> | number
  userId?: Prisma.IntFilter<"Allocation"> | number
  createdAt?: Prisma.DateTimeFilter<"Allocation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Allocation"> | Date | string
  budget?: Prisma.XOR<Prisma.BudgetScalarRelationFilter, Prisma.BudgetWhereInput>
  transactions?: Prisma.TransactionListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type AllocationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AllocationCountOrderByAggregateInput
  _avg?: Prisma.AllocationAvgOrderByAggregateInput
  _max?: Prisma.AllocationMaxOrderByAggregateInput
  _min?: Prisma.AllocationMinOrderByAggregateInput
  _sum?: Prisma.AllocationSumOrderByAggregateInput
}

export type AllocationScalarWhereWithAggregatesInput = {
  AND?: Prisma.AllocationScalarWhereWithAggregatesInput | Prisma.AllocationScalarWhereWithAggregatesInput[]
  OR?: Prisma.AllocationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AllocationScalarWhereWithAggregatesInput | Prisma.AllocationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Allocation"> | number
  name?: Prisma.StringWithAggregatesFilter<"Allocation"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"Allocation"> | number
  budgetId?: Prisma.IntWithAggregatesFilter<"Allocation"> | number
  userId?: Prisma.IntWithAggregatesFilter<"Allocation"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Allocation"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Allocation"> | Date | string
}

export type AllocationCreateInput = {
  name: string
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  budget: Prisma.BudgetCreateNestedOneWithoutAllocationsInput
  transactions?: Prisma.TransactionCreateNestedManyWithoutAllocationInput
  user: Prisma.UserCreateNestedOneWithoutAllocationsInput
}

export type AllocationUncheckedCreateInput = {
  id?: number
  name: string
  amount: number
  budgetId: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAllocationInput
}

export type AllocationUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  budget?: Prisma.BudgetUpdateOneRequiredWithoutAllocationsNestedInput
  transactions?: Prisma.TransactionUpdateManyWithoutAllocationNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAllocationsNestedInput
}

export type AllocationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  budgetId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAllocationNestedInput
}

export type AllocationCreateManyInput = {
  id?: number
  name: string
  amount: number
  budgetId: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AllocationUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AllocationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  budgetId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AllocationListRelationFilter = {
  every?: Prisma.AllocationWhereInput
  some?: Prisma.AllocationWhereInput
  none?: Prisma.AllocationWhereInput
}

export type AllocationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AllocationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AllocationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type AllocationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AllocationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AllocationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  budgetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type AllocationNullableScalarRelationFilter = {
  is?: Prisma.AllocationWhereInput | null
  isNot?: Prisma.AllocationWhereInput | null
}

export type AllocationCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutUserInput, Prisma.AllocationUncheckedCreateWithoutUserInput> | Prisma.AllocationCreateWithoutUserInput[] | Prisma.AllocationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutUserInput | Prisma.AllocationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AllocationCreateManyUserInputEnvelope
  connect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
}

export type AllocationUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutUserInput, Prisma.AllocationUncheckedCreateWithoutUserInput> | Prisma.AllocationCreateWithoutUserInput[] | Prisma.AllocationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutUserInput | Prisma.AllocationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AllocationCreateManyUserInputEnvelope
  connect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
}

export type AllocationUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutUserInput, Prisma.AllocationUncheckedCreateWithoutUserInput> | Prisma.AllocationCreateWithoutUserInput[] | Prisma.AllocationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutUserInput | Prisma.AllocationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AllocationUpsertWithWhereUniqueWithoutUserInput | Prisma.AllocationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AllocationCreateManyUserInputEnvelope
  set?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  disconnect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  delete?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  connect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  update?: Prisma.AllocationUpdateWithWhereUniqueWithoutUserInput | Prisma.AllocationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AllocationUpdateManyWithWhereWithoutUserInput | Prisma.AllocationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AllocationScalarWhereInput | Prisma.AllocationScalarWhereInput[]
}

export type AllocationUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutUserInput, Prisma.AllocationUncheckedCreateWithoutUserInput> | Prisma.AllocationCreateWithoutUserInput[] | Prisma.AllocationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutUserInput | Prisma.AllocationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AllocationUpsertWithWhereUniqueWithoutUserInput | Prisma.AllocationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AllocationCreateManyUserInputEnvelope
  set?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  disconnect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  delete?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  connect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  update?: Prisma.AllocationUpdateWithWhereUniqueWithoutUserInput | Prisma.AllocationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AllocationUpdateManyWithWhereWithoutUserInput | Prisma.AllocationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AllocationScalarWhereInput | Prisma.AllocationScalarWhereInput[]
}

export type AllocationCreateNestedManyWithoutBudgetInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutBudgetInput, Prisma.AllocationUncheckedCreateWithoutBudgetInput> | Prisma.AllocationCreateWithoutBudgetInput[] | Prisma.AllocationUncheckedCreateWithoutBudgetInput[]
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutBudgetInput | Prisma.AllocationCreateOrConnectWithoutBudgetInput[]
  createMany?: Prisma.AllocationCreateManyBudgetInputEnvelope
  connect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
}

export type AllocationUncheckedCreateNestedManyWithoutBudgetInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutBudgetInput, Prisma.AllocationUncheckedCreateWithoutBudgetInput> | Prisma.AllocationCreateWithoutBudgetInput[] | Prisma.AllocationUncheckedCreateWithoutBudgetInput[]
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutBudgetInput | Prisma.AllocationCreateOrConnectWithoutBudgetInput[]
  createMany?: Prisma.AllocationCreateManyBudgetInputEnvelope
  connect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
}

export type AllocationUpdateManyWithoutBudgetNestedInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutBudgetInput, Prisma.AllocationUncheckedCreateWithoutBudgetInput> | Prisma.AllocationCreateWithoutBudgetInput[] | Prisma.AllocationUncheckedCreateWithoutBudgetInput[]
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutBudgetInput | Prisma.AllocationCreateOrConnectWithoutBudgetInput[]
  upsert?: Prisma.AllocationUpsertWithWhereUniqueWithoutBudgetInput | Prisma.AllocationUpsertWithWhereUniqueWithoutBudgetInput[]
  createMany?: Prisma.AllocationCreateManyBudgetInputEnvelope
  set?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  disconnect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  delete?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  connect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  update?: Prisma.AllocationUpdateWithWhereUniqueWithoutBudgetInput | Prisma.AllocationUpdateWithWhereUniqueWithoutBudgetInput[]
  updateMany?: Prisma.AllocationUpdateManyWithWhereWithoutBudgetInput | Prisma.AllocationUpdateManyWithWhereWithoutBudgetInput[]
  deleteMany?: Prisma.AllocationScalarWhereInput | Prisma.AllocationScalarWhereInput[]
}

export type AllocationUncheckedUpdateManyWithoutBudgetNestedInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutBudgetInput, Prisma.AllocationUncheckedCreateWithoutBudgetInput> | Prisma.AllocationCreateWithoutBudgetInput[] | Prisma.AllocationUncheckedCreateWithoutBudgetInput[]
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutBudgetInput | Prisma.AllocationCreateOrConnectWithoutBudgetInput[]
  upsert?: Prisma.AllocationUpsertWithWhereUniqueWithoutBudgetInput | Prisma.AllocationUpsertWithWhereUniqueWithoutBudgetInput[]
  createMany?: Prisma.AllocationCreateManyBudgetInputEnvelope
  set?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  disconnect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  delete?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  connect?: Prisma.AllocationWhereUniqueInput | Prisma.AllocationWhereUniqueInput[]
  update?: Prisma.AllocationUpdateWithWhereUniqueWithoutBudgetInput | Prisma.AllocationUpdateWithWhereUniqueWithoutBudgetInput[]
  updateMany?: Prisma.AllocationUpdateManyWithWhereWithoutBudgetInput | Prisma.AllocationUpdateManyWithWhereWithoutBudgetInput[]
  deleteMany?: Prisma.AllocationScalarWhereInput | Prisma.AllocationScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type AllocationCreateNestedOneWithoutTransactionsInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutTransactionsInput, Prisma.AllocationUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutTransactionsInput
  connect?: Prisma.AllocationWhereUniqueInput
}

export type AllocationUpdateOneWithoutTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.AllocationCreateWithoutTransactionsInput, Prisma.AllocationUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.AllocationCreateOrConnectWithoutTransactionsInput
  upsert?: Prisma.AllocationUpsertWithoutTransactionsInput
  disconnect?: Prisma.AllocationWhereInput | boolean
  delete?: Prisma.AllocationWhereInput | boolean
  connect?: Prisma.AllocationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AllocationUpdateToOneWithWhereWithoutTransactionsInput, Prisma.AllocationUpdateWithoutTransactionsInput>, Prisma.AllocationUncheckedUpdateWithoutTransactionsInput>
}

export type AllocationCreateWithoutUserInput = {
  name: string
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  budget: Prisma.BudgetCreateNestedOneWithoutAllocationsInput
  transactions?: Prisma.TransactionCreateNestedManyWithoutAllocationInput
}

export type AllocationUncheckedCreateWithoutUserInput = {
  id?: number
  name: string
  amount: number
  budgetId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAllocationInput
}

export type AllocationCreateOrConnectWithoutUserInput = {
  where: Prisma.AllocationWhereUniqueInput
  create: Prisma.XOR<Prisma.AllocationCreateWithoutUserInput, Prisma.AllocationUncheckedCreateWithoutUserInput>
}

export type AllocationCreateManyUserInputEnvelope = {
  data: Prisma.AllocationCreateManyUserInput | Prisma.AllocationCreateManyUserInput[]
}

export type AllocationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AllocationWhereUniqueInput
  update: Prisma.XOR<Prisma.AllocationUpdateWithoutUserInput, Prisma.AllocationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AllocationCreateWithoutUserInput, Prisma.AllocationUncheckedCreateWithoutUserInput>
}

export type AllocationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AllocationWhereUniqueInput
  data: Prisma.XOR<Prisma.AllocationUpdateWithoutUserInput, Prisma.AllocationUncheckedUpdateWithoutUserInput>
}

export type AllocationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AllocationScalarWhereInput
  data: Prisma.XOR<Prisma.AllocationUpdateManyMutationInput, Prisma.AllocationUncheckedUpdateManyWithoutUserInput>
}

export type AllocationScalarWhereInput = {
  AND?: Prisma.AllocationScalarWhereInput | Prisma.AllocationScalarWhereInput[]
  OR?: Prisma.AllocationScalarWhereInput[]
  NOT?: Prisma.AllocationScalarWhereInput | Prisma.AllocationScalarWhereInput[]
  id?: Prisma.IntFilter<"Allocation"> | number
  name?: Prisma.StringFilter<"Allocation"> | string
  amount?: Prisma.FloatFilter<"Allocation"> | number
  budgetId?: Prisma.IntFilter<"Allocation"> | number
  userId?: Prisma.IntFilter<"Allocation"> | number
  createdAt?: Prisma.DateTimeFilter<"Allocation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Allocation"> | Date | string
}

export type AllocationCreateWithoutBudgetInput = {
  name: string
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionCreateNestedManyWithoutAllocationInput
  user: Prisma.UserCreateNestedOneWithoutAllocationsInput
}

export type AllocationUncheckedCreateWithoutBudgetInput = {
  id?: number
  name: string
  amount: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAllocationInput
}

export type AllocationCreateOrConnectWithoutBudgetInput = {
  where: Prisma.AllocationWhereUniqueInput
  create: Prisma.XOR<Prisma.AllocationCreateWithoutBudgetInput, Prisma.AllocationUncheckedCreateWithoutBudgetInput>
}

export type AllocationCreateManyBudgetInputEnvelope = {
  data: Prisma.AllocationCreateManyBudgetInput | Prisma.AllocationCreateManyBudgetInput[]
}

export type AllocationUpsertWithWhereUniqueWithoutBudgetInput = {
  where: Prisma.AllocationWhereUniqueInput
  update: Prisma.XOR<Prisma.AllocationUpdateWithoutBudgetInput, Prisma.AllocationUncheckedUpdateWithoutBudgetInput>
  create: Prisma.XOR<Prisma.AllocationCreateWithoutBudgetInput, Prisma.AllocationUncheckedCreateWithoutBudgetInput>
}

export type AllocationUpdateWithWhereUniqueWithoutBudgetInput = {
  where: Prisma.AllocationWhereUniqueInput
  data: Prisma.XOR<Prisma.AllocationUpdateWithoutBudgetInput, Prisma.AllocationUncheckedUpdateWithoutBudgetInput>
}

export type AllocationUpdateManyWithWhereWithoutBudgetInput = {
  where: Prisma.AllocationScalarWhereInput
  data: Prisma.XOR<Prisma.AllocationUpdateManyMutationInput, Prisma.AllocationUncheckedUpdateManyWithoutBudgetInput>
}

export type AllocationCreateWithoutTransactionsInput = {
  name: string
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  budget: Prisma.BudgetCreateNestedOneWithoutAllocationsInput
  user: Prisma.UserCreateNestedOneWithoutAllocationsInput
}

export type AllocationUncheckedCreateWithoutTransactionsInput = {
  id?: number
  name: string
  amount: number
  budgetId: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AllocationCreateOrConnectWithoutTransactionsInput = {
  where: Prisma.AllocationWhereUniqueInput
  create: Prisma.XOR<Prisma.AllocationCreateWithoutTransactionsInput, Prisma.AllocationUncheckedCreateWithoutTransactionsInput>
}

export type AllocationUpsertWithoutTransactionsInput = {
  update: Prisma.XOR<Prisma.AllocationUpdateWithoutTransactionsInput, Prisma.AllocationUncheckedUpdateWithoutTransactionsInput>
  create: Prisma.XOR<Prisma.AllocationCreateWithoutTransactionsInput, Prisma.AllocationUncheckedCreateWithoutTransactionsInput>
  where?: Prisma.AllocationWhereInput
}

export type AllocationUpdateToOneWithWhereWithoutTransactionsInput = {
  where?: Prisma.AllocationWhereInput
  data: Prisma.XOR<Prisma.AllocationUpdateWithoutTransactionsInput, Prisma.AllocationUncheckedUpdateWithoutTransactionsInput>
}

export type AllocationUpdateWithoutTransactionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  budget?: Prisma.BudgetUpdateOneRequiredWithoutAllocationsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAllocationsNestedInput
}

export type AllocationUncheckedUpdateWithoutTransactionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  budgetId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AllocationCreateManyUserInput = {
  id?: number
  name: string
  amount: number
  budgetId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AllocationUpdateWithoutUserInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  budget?: Prisma.BudgetUpdateOneRequiredWithoutAllocationsNestedInput
  transactions?: Prisma.TransactionUpdateManyWithoutAllocationNestedInput
}

export type AllocationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  budgetId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAllocationNestedInput
}

export type AllocationUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  budgetId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AllocationCreateManyBudgetInput = {
  id?: number
  name: string
  amount: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AllocationUpdateWithoutBudgetInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUpdateManyWithoutAllocationNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAllocationsNestedInput
}

export type AllocationUncheckedUpdateWithoutBudgetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAllocationNestedInput
}

export type AllocationUncheckedUpdateManyWithoutBudgetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type AllocationCountOutputType
 */

export type AllocationCountOutputType = {
  transactions: number
}

export type AllocationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transactions?: boolean | AllocationCountOutputTypeCountTransactionsArgs
}

/**
 * AllocationCountOutputType without action
 */
export type AllocationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllocationCountOutputType
   */
  select?: Prisma.AllocationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AllocationCountOutputType without action
 */
export type AllocationCountOutputTypeCountTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}


export type AllocationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  amount?: boolean
  budgetId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  budget?: boolean | Prisma.BudgetDefaultArgs<ExtArgs>
  transactions?: boolean | Prisma.Allocation$transactionsArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.AllocationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["allocation"]>

export type AllocationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  amount?: boolean
  budgetId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  budget?: boolean | Prisma.BudgetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["allocation"]>

export type AllocationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  amount?: boolean
  budgetId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  budget?: boolean | Prisma.BudgetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["allocation"]>

export type AllocationSelectScalar = {
  id?: boolean
  name?: boolean
  amount?: boolean
  budgetId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AllocationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "amount" | "budgetId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["allocation"]>
export type AllocationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  budget?: boolean | Prisma.BudgetDefaultArgs<ExtArgs>
  transactions?: boolean | Prisma.Allocation$transactionsArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.AllocationCountOutputTypeDefaultArgs<ExtArgs>
}
export type AllocationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  budget?: boolean | Prisma.BudgetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AllocationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  budget?: boolean | Prisma.BudgetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AllocationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Allocation"
  objects: {
    budget: Prisma.$BudgetPayload<ExtArgs>
    transactions: Prisma.$TransactionPayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    amount: number
    budgetId: number
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["allocation"]>
  composites: {}
}

export type AllocationGetPayload<S extends boolean | null | undefined | AllocationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AllocationPayload, S>

export type AllocationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AllocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AllocationCountAggregateInputType | true
  }

export interface AllocationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Allocation'], meta: { name: 'Allocation' } }
  /**
   * Find zero or one Allocation that matches the filter.
   * @param {AllocationFindUniqueArgs} args - Arguments to find a Allocation
   * @example
   * // Get one Allocation
   * const allocation = await prisma.allocation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AllocationFindUniqueArgs>(args: Prisma.SelectSubset<T, AllocationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AllocationClient<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Allocation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AllocationFindUniqueOrThrowArgs} args - Arguments to find a Allocation
   * @example
   * // Get one Allocation
   * const allocation = await prisma.allocation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AllocationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AllocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AllocationClient<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Allocation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllocationFindFirstArgs} args - Arguments to find a Allocation
   * @example
   * // Get one Allocation
   * const allocation = await prisma.allocation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AllocationFindFirstArgs>(args?: Prisma.SelectSubset<T, AllocationFindFirstArgs<ExtArgs>>): Prisma.Prisma__AllocationClient<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Allocation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllocationFindFirstOrThrowArgs} args - Arguments to find a Allocation
   * @example
   * // Get one Allocation
   * const allocation = await prisma.allocation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AllocationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AllocationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AllocationClient<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Allocations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllocationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Allocations
   * const allocations = await prisma.allocation.findMany()
   * 
   * // Get first 10 Allocations
   * const allocations = await prisma.allocation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const allocationWithIdOnly = await prisma.allocation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AllocationFindManyArgs>(args?: Prisma.SelectSubset<T, AllocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Allocation.
   * @param {AllocationCreateArgs} args - Arguments to create a Allocation.
   * @example
   * // Create one Allocation
   * const Allocation = await prisma.allocation.create({
   *   data: {
   *     // ... data to create a Allocation
   *   }
   * })
   * 
   */
  create<T extends AllocationCreateArgs>(args: Prisma.SelectSubset<T, AllocationCreateArgs<ExtArgs>>): Prisma.Prisma__AllocationClient<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Allocations.
   * @param {AllocationCreateManyArgs} args - Arguments to create many Allocations.
   * @example
   * // Create many Allocations
   * const allocation = await prisma.allocation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AllocationCreateManyArgs>(args?: Prisma.SelectSubset<T, AllocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Allocations and returns the data saved in the database.
   * @param {AllocationCreateManyAndReturnArgs} args - Arguments to create many Allocations.
   * @example
   * // Create many Allocations
   * const allocation = await prisma.allocation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Allocations and only return the `id`
   * const allocationWithIdOnly = await prisma.allocation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AllocationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AllocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Allocation.
   * @param {AllocationDeleteArgs} args - Arguments to delete one Allocation.
   * @example
   * // Delete one Allocation
   * const Allocation = await prisma.allocation.delete({
   *   where: {
   *     // ... filter to delete one Allocation
   *   }
   * })
   * 
   */
  delete<T extends AllocationDeleteArgs>(args: Prisma.SelectSubset<T, AllocationDeleteArgs<ExtArgs>>): Prisma.Prisma__AllocationClient<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Allocation.
   * @param {AllocationUpdateArgs} args - Arguments to update one Allocation.
   * @example
   * // Update one Allocation
   * const allocation = await prisma.allocation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AllocationUpdateArgs>(args: Prisma.SelectSubset<T, AllocationUpdateArgs<ExtArgs>>): Prisma.Prisma__AllocationClient<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Allocations.
   * @param {AllocationDeleteManyArgs} args - Arguments to filter Allocations to delete.
   * @example
   * // Delete a few Allocations
   * const { count } = await prisma.allocation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AllocationDeleteManyArgs>(args?: Prisma.SelectSubset<T, AllocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Allocations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllocationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Allocations
   * const allocation = await prisma.allocation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AllocationUpdateManyArgs>(args: Prisma.SelectSubset<T, AllocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Allocations and returns the data updated in the database.
   * @param {AllocationUpdateManyAndReturnArgs} args - Arguments to update many Allocations.
   * @example
   * // Update many Allocations
   * const allocation = await prisma.allocation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Allocations and only return the `id`
   * const allocationWithIdOnly = await prisma.allocation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AllocationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AllocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Allocation.
   * @param {AllocationUpsertArgs} args - Arguments to update or create a Allocation.
   * @example
   * // Update or create a Allocation
   * const allocation = await prisma.allocation.upsert({
   *   create: {
   *     // ... data to create a Allocation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Allocation we want to update
   *   }
   * })
   */
  upsert<T extends AllocationUpsertArgs>(args: Prisma.SelectSubset<T, AllocationUpsertArgs<ExtArgs>>): Prisma.Prisma__AllocationClient<runtime.Types.Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Allocations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllocationCountArgs} args - Arguments to filter Allocations to count.
   * @example
   * // Count the number of Allocations
   * const count = await prisma.allocation.count({
   *   where: {
   *     // ... the filter for the Allocations we want to count
   *   }
   * })
  **/
  count<T extends AllocationCountArgs>(
    args?: Prisma.Subset<T, AllocationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AllocationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Allocation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AllocationAggregateArgs>(args: Prisma.Subset<T, AllocationAggregateArgs>): Prisma.PrismaPromise<GetAllocationAggregateType<T>>

  /**
   * Group by Allocation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllocationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AllocationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AllocationGroupByArgs['orderBy'] }
      : { orderBy?: AllocationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AllocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Allocation model
 */
readonly fields: AllocationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Allocation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AllocationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  budget<T extends Prisma.BudgetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BudgetDefaultArgs<ExtArgs>>): Prisma.Prisma__BudgetClient<runtime.Types.Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  transactions<T extends Prisma.Allocation$transactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Allocation$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Allocation model
 */
export interface AllocationFieldRefs {
  readonly id: Prisma.FieldRef<"Allocation", 'Int'>
  readonly name: Prisma.FieldRef<"Allocation", 'String'>
  readonly amount: Prisma.FieldRef<"Allocation", 'Float'>
  readonly budgetId: Prisma.FieldRef<"Allocation", 'Int'>
  readonly userId: Prisma.FieldRef<"Allocation", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Allocation", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Allocation", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Allocation findUnique
 */
export type AllocationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * Filter, which Allocation to fetch.
   */
  where: Prisma.AllocationWhereUniqueInput
}

/**
 * Allocation findUniqueOrThrow
 */
export type AllocationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * Filter, which Allocation to fetch.
   */
  where: Prisma.AllocationWhereUniqueInput
}

/**
 * Allocation findFirst
 */
export type AllocationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * Filter, which Allocation to fetch.
   */
  where?: Prisma.AllocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Allocations to fetch.
   */
  orderBy?: Prisma.AllocationOrderByWithRelationInput | Prisma.AllocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Allocations.
   */
  cursor?: Prisma.AllocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Allocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Allocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Allocations.
   */
  distinct?: Prisma.AllocationScalarFieldEnum | Prisma.AllocationScalarFieldEnum[]
}

/**
 * Allocation findFirstOrThrow
 */
export type AllocationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * Filter, which Allocation to fetch.
   */
  where?: Prisma.AllocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Allocations to fetch.
   */
  orderBy?: Prisma.AllocationOrderByWithRelationInput | Prisma.AllocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Allocations.
   */
  cursor?: Prisma.AllocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Allocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Allocations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Allocations.
   */
  distinct?: Prisma.AllocationScalarFieldEnum | Prisma.AllocationScalarFieldEnum[]
}

/**
 * Allocation findMany
 */
export type AllocationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * Filter, which Allocations to fetch.
   */
  where?: Prisma.AllocationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Allocations to fetch.
   */
  orderBy?: Prisma.AllocationOrderByWithRelationInput | Prisma.AllocationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Allocations.
   */
  cursor?: Prisma.AllocationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Allocations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Allocations.
   */
  skip?: number
  distinct?: Prisma.AllocationScalarFieldEnum | Prisma.AllocationScalarFieldEnum[]
}

/**
 * Allocation create
 */
export type AllocationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * The data needed to create a Allocation.
   */
  data: Prisma.XOR<Prisma.AllocationCreateInput, Prisma.AllocationUncheckedCreateInput>
}

/**
 * Allocation createMany
 */
export type AllocationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Allocations.
   */
  data: Prisma.AllocationCreateManyInput | Prisma.AllocationCreateManyInput[]
}

/**
 * Allocation createManyAndReturn
 */
export type AllocationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * The data used to create many Allocations.
   */
  data: Prisma.AllocationCreateManyInput | Prisma.AllocationCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Allocation update
 */
export type AllocationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * The data needed to update a Allocation.
   */
  data: Prisma.XOR<Prisma.AllocationUpdateInput, Prisma.AllocationUncheckedUpdateInput>
  /**
   * Choose, which Allocation to update.
   */
  where: Prisma.AllocationWhereUniqueInput
}

/**
 * Allocation updateMany
 */
export type AllocationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Allocations.
   */
  data: Prisma.XOR<Prisma.AllocationUpdateManyMutationInput, Prisma.AllocationUncheckedUpdateManyInput>
  /**
   * Filter which Allocations to update
   */
  where?: Prisma.AllocationWhereInput
  /**
   * Limit how many Allocations to update.
   */
  limit?: number
}

/**
 * Allocation updateManyAndReturn
 */
export type AllocationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * The data used to update Allocations.
   */
  data: Prisma.XOR<Prisma.AllocationUpdateManyMutationInput, Prisma.AllocationUncheckedUpdateManyInput>
  /**
   * Filter which Allocations to update
   */
  where?: Prisma.AllocationWhereInput
  /**
   * Limit how many Allocations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Allocation upsert
 */
export type AllocationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * The filter to search for the Allocation to update in case it exists.
   */
  where: Prisma.AllocationWhereUniqueInput
  /**
   * In case the Allocation found by the `where` argument doesn't exist, create a new Allocation with this data.
   */
  create: Prisma.XOR<Prisma.AllocationCreateInput, Prisma.AllocationUncheckedCreateInput>
  /**
   * In case the Allocation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AllocationUpdateInput, Prisma.AllocationUncheckedUpdateInput>
}

/**
 * Allocation delete
 */
export type AllocationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
  /**
   * Filter which Allocation to delete.
   */
  where: Prisma.AllocationWhereUniqueInput
}

/**
 * Allocation deleteMany
 */
export type AllocationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Allocations to delete
   */
  where?: Prisma.AllocationWhereInput
  /**
   * Limit how many Allocations to delete.
   */
  limit?: number
}

/**
 * Allocation.transactions
 */
export type Allocation$transactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Allocation without action
 */
export type AllocationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Allocation
   */
  select?: Prisma.AllocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Allocation
   */
  omit?: Prisma.AllocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AllocationInclude<ExtArgs> | null
}
