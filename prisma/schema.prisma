// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Ensure the output path is correct for your project structure
  output   = "../node_modules/@prisma-app/client"
}

datasource db {
  provider = "sqlite"
  // url      = env("DATABASE_PROD_URL")
  url      = env("DATABASE_DEV_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  isActive  Boolean    @default(false) @map("is_active")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  transactions Transaction[]
  allocations  Allocation[]

  @@map("users")
}

model Budget {
  id          Int         @id @default(autoincrement())
  name        String
  startDate   DateTime    @map("start_date")
  endDate     DateTime    @map("end_date")
  allocations Allocation[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("budgets")
}

model Allocation {
  id           Int         @id @default(autoincrement())
  amount       Float
  budget       Budget      @relation(fields: [budgetId], references: [id])
  budgetId     Int         @map("budget_id")
  transactions Transaction[]
  user         User        @relation(fields: [userId], references: [id])
  userId       Int         @map("user_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("allocations")
}

model Transaction {
  id           Int        @id @default(autoincrement())
  amount       Float
  date         DateTime   @default(now())
  allocation   Allocation @relation(fields: [allocationId], references: [id])
  allocationId Int        @map("allocation_id")
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @map("user_id")
  account      Account    @relation(fields: [accountId], references: [id])
  accountId    Int        @map("account_id")
  wallet       Wallet     @relation(fields: [walletId], references: [id])
  walletId     Int        @map("wallet_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("transactions")
}

model Account {
  id           Int           @id @default(autoincrement())
  name         String
  balance      Float
  transactions Transaction[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("accounts")
}

model Wallet {
  id           Int           @id @default(autoincrement())
  name         String
  balance      Float
  transactions Transaction[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("wallets")
}
