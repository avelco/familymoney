// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma-app/client"
}

datasource db {
  provider = "sqlite"
  // url      = env("DATABASE_PROD_URL")
  url      = env("DATABASE_DEV_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String    
  email     String     @unique
  password  String    
  isActive  Boolean    @default(false) @map("is_active")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt  @map("updated_at")

  categories Category[]
  accounts   Account[]
  budgets    Budget[]
  goals      Goal[]

  @@map("users")
}

model Category {
  id         Int           @id @default(autoincrement())
  userId     Int           @map("user_id")
  user       User          @relation(fields: [userId], references: [id])
  name       String       
  type       String        @default("expense")
  createdAt  DateTime      @default(now())  @map("created_at")
  updatedAt  DateTime      @updatedAt       @map("updated_at")

  transactions Transaction[]
  budgets      Budget[]

  @@index([userId], name: "idx_categories_user_id")
  @@map("categories")
}

model Account {
  id         Int           @id @default(autoincrement())
  userId     Int           @map("user_id")
  user       User          @relation(fields: [userId], references: [id])
  name       String       
  type       String       
  balance    Decimal       @default("0.00") 
  currency   String        @default("USD")  
  createdAt  DateTime      @default(now())    @map("created_at")
  updatedAt  DateTime      @updatedAt         @map("updated_at")

  transactions Transaction[]

  @@index([userId], name: "idx_accounts_user_id")
  @@map("accounts")
}

model Transaction {
  id               Int        @id @default(autoincrement())
  accountId        Int        @map("account_id")
  account          Account    @relation(fields: [accountId], references: [id])
  categoryId       Int        @map("category_id")
  category         Category   @relation(fields: [categoryId], references: [id])
  amount           Decimal    
  transactionDate  DateTime   @default(now()) @map("transaction_date")
  description      String?    
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt      @map("updated_at")

  @@index([accountId],  name: "idx_transactions_account_id")
  @@index([categoryId], name: "idx_transactions_category_id")
  @@map("transactions")
}

model Budget {
  id         Int        @id @default(autoincrement())
  userId     Int        @map("user_id")
  user       User       @relation(fields: [userId], references: [id])
  categoryId Int?       @map("category_id")
  category   Category?  @relation(fields: [categoryId], references: [id])
  amount     Decimal    
  startDate  DateTime   @map("start_date")
  endDate    DateTime?  @map("end_date")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt      @map("updated_at")

  @@index([userId],     name: "idx_budgets_user_id")
  @@index([categoryId], name: "idx_budgets_category_id")
  @@map("budgets")
}

model Goal {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  user          User      @relation(fields: [userId], references: [id])
  name          String   
  targetAmount  Decimal   @map("target_amount")
  currentAmount Decimal   @default("0.00") @map("current_amount")
  deadline      DateTime? @map("deadline")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt      @map("updated_at")

  @@index([userId], name: "idx_goals_user_id")
  @@map("goals")
}